/*
 * This file is generated by jOOQ.
*/
package au.com.coffeesaints.db.generated.tables;


import au.com.coffeesaints.db.generated.Keys;
import au.com.coffeesaints.db.generated.Public;
import au.com.coffeesaints.db.generated.tables.records.SaintRecord;

import java.sql.Time;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Saint extends TableImpl<SaintRecord> {

    private static final long serialVersionUID = 1736109488;

    /**
     * The reference instance of <code>public.saint</code>
     */
    public static final Saint SAINT = new Saint();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SaintRecord> getRecordType() {
        return SaintRecord.class;
    }

    /**
     * The column <code>public.saint.id</code>.
     */
    public final TableField<SaintRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('saint_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.saint.name</code>.
     */
    public final TableField<SaintRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>public.saint.coffee_bought</code>.
     */
    public final TableField<SaintRecord, Integer> COFFEE_BOUGHT = createField("coffee_bought", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.saint.coffee_consumed</code>.
     */
    public final TableField<SaintRecord, Integer> COFFEE_CONSUMED = createField("coffee_consumed", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.saint.created</code>.
     */
    public final TableField<SaintRecord, Time> CREATED = createField("created", org.jooq.impl.SQLDataType.TIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIME)), this, "");

    /**
     * The column <code>public.saint.modified</code>.
     */
    public final TableField<SaintRecord, Time> MODIFIED = createField("modified", org.jooq.impl.SQLDataType.TIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIME)), this, "");

    /**
     * Create a <code>public.saint</code> table reference
     */
    public Saint() {
        this("saint", null);
    }

    /**
     * Create an aliased <code>public.saint</code> table reference
     */
    public Saint(String alias) {
        this(alias, SAINT);
    }

    private Saint(String alias, Table<SaintRecord> aliased) {
        this(alias, aliased, null);
    }

    private Saint(String alias, Table<SaintRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SaintRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SAINT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SaintRecord> getPrimaryKey() {
        return Keys.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SaintRecord>> getKeys() {
        return Arrays.<UniqueKey<SaintRecord>>asList(Keys.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Saint as(String alias) {
        return new Saint(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Saint rename(String name) {
        return new Saint(name, null);
    }
}
